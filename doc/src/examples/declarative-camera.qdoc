/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\example declarative-camera
\title QML Camera Example
\ingroup camera_examples_qml

\brief  The Camera Example shows how to use the API to capture a still image
or video.

\image qml-camera.png

This example demonstrates the basic use of the Camera QML Plugin elements. The
plugin provides access to the API functionality for camera settings and
capturing an image.

Most of the QML code supports the user interface for this application with the
Camera elements being mostly found in \e {declarative-camera.qml} and
\e {CaptureControls.qml}.

In \e {declarative-camera.qml} the Camera element is initialized with an id
of \e {camera}, a photo preview is setup, states are implemented for image
preview or capture and a CaptureControls element is initialized. The initial
\e state is \e PhotoCapture. The camera element includes a handler, \e onImageCaptured,
for the \l {imageCaptured} signal. The handler sets up the application to process
the preview including a change in the user interface state. The PhotoPreview
element now becomes visible with any key press being picked up by the handler
in PhotoPreview and returning the state to \e PhotoCapture.

The \e CaptureControls element, which is implemented in \e {CaptureControls.qml},
generates a column on the right hand side of the screen which includes control
buttons for \e focus (not initially visible), \e {capture}, \e {flash modes},
\e {white balance}, \e {exposure compensation}, and if a preview is
available a \e {preview} button. The last button exits from the application.

When the Capture button is pressed the \e onClicked handler calls
\l {Camera::captureImage()}{captureImage()}







*/
