/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/multimedia

testcase = {

/* Notes
Ensure 2 test .mp4 files are available on device
Ensure the device can ping destinations on the network (if applicable)
Have a video stream url available (e.g. http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4)
Ensure access to Internet available to device
Ensure an active SIM card is available on the device. As some video streaming tests are carrier spacific, it is recomended in Australia to have access to Testra, Optus and Vodafone SIM's
*/
    initTestCase: function()
    {
    },

    play_a_video_file_data: {
        mp4:[".mp4", "filename", "mpeg video layer 4"]
    },

    play_a_video_file: function(extension, filename, format)
    {
      // Test meta data
      testApplication = "Multimedia - Play Video File";
      testBinary = "player";
      testGoal = "Verify that local, networked and carrier streamed video files can be played. ";
      testPreconditions = "1. A test "+extension+" file is available on device.<br>2. Internet acces is enabled on the device.<br>3. Operator SIM cards are available to the device";
      testGroups = "BAT";

      // Test steps
      prompt(twiki("---+++ " + testApplication + "<br><br>
          *Goal:* " + testGoal + "<br>
          *Pre-Requisites:* " + testPreconditions + "<br>
          *Tested Binary:* " + testBinary + "<br>

         | *Step* | *Verification* |
         | Launch " + testBinary + " | App launches normally |
         | Select [Open] | |
         | In [Open File] select the "+filename+extension+" file to return to player UI | |
         | Select [Play] to play the file | Verify selected file has populated playlist |
         | Highlight file in playlist by clicking on it | |
         | Select [Play] | Verify that .MP4 file is playing on device |
      "));
    },

    basic_controls_for_video_data: {
        mp4:[".mp4", "filename", "mpeg video layer 4"]
    },

    basic_controls_for_video: function(extension, filename, format)
    {
      // Test meta data
      testApplication = "Multimedia - Video Controls";
      testBinary = "player";
      testGoal = "Verify the API for basic video playback functionality";
      testPreconditions = "a test "+extension+" file is available on device.";
      testGroups = "BAT";

      // Test steps
      prompt(twiki("---+++ " + testApplication + "<br><br>
          *Goal:* " + testGoal + "<br>
          *Pre-Requisites:* " + testPreconditions + "<br>
          *Tested Binary:* " + testBinary + "<br>

         | *Step* | *Verification* |
         | Launch " + testBinary + " | App launches normally |
         | Select [Open] | |
         | In [Open File] select the "+filename+extension+" file to return to player UI | |
         | Select [Play] to play the file | |
         | Select [Pause] | Verify that file has paused |
         | | Verify that the [Pause] icon has changed to a [Play] icon |
         | Select [Play] | Verify that the [Play] icon has changed to a [Pause] icon |
         | | Verify that file continues to play from where previously paused. |
         | Select [Next File] | Verify that next file in playlist is playing from start |
         | After some time (10-20 sec) Select [Beginning of File] control | Verify that current file is being played from start |
         | Let arbitrary time pass, then Select [Beginning of File] control twice in quick succession.| Verify that previous file in playlist is playing from start |
         | Select [Stop] | Verify that file has stopped playing |
         | Select [Play] | Verify that file continues to play from start of file. |
         | Let file play till end | Verify player stops at end of file. |
         | Start playing file. | |
         | After arbitrary time, Select [Stop] | |
         | Select [Next File] | Verify that next file in playlist is highlighted |
         | | Verify that file is not automatically playing |
         | Select [Beginning of File] | Verify that previous file in playlist is highlighted |
         | Select file in playlist | Verify that file plays in player. |
         | Select number of files greater than can be displayed without scrolling in to playlist | Verify that list can be scrolled through |
         | With file playing, verify that hardware keys can change volume up and down | |
         | With file playing, verify that UI volume control slider can change volume up and down | |
         | Select volume at 50% (or thereabout) | |
         | Select [Mute] control | Verify that sound is muted while file is playing |
         | | Verify that [Mute] control is displaying the Muted icon |
         | Select [Mute] control again | Verify that sound has reverted back to level selected prior to muting |
         | Drag positional slider to right, then release | Verify that player continues to play file at later part of file |
         | Drag positional slider to left, then release | Verify that player continues to play file at earlier part of file |
         | Start playing file | |
         | Select [FullScreen] control | Verify that video is now playing in Fullscreen mode |
         | When at end of current file | Verify that next file in playlist is being played |
         | When at last file in playlist and at end of file | Verify that fullscreen mode is exited and user returned to player interface and that [FullScreen] is no longer selected. |
       "));
    },

    seek_controls_for_video: function()
    {
       // Test meta data
       testApplication = "Multimedia - Video Seek";
       testBinary = "player";
       testGoal = "Verify the API for Fast Forward/Rewind functionality.";
       testPreconditions = "Video files are available for testing on the device.";
       testGroups = "BAT";

       // Test steps
       prompt(twiki("---+++ " + testApplication + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | While playing a video file, Select or Tap on [1.0] (Multiplier) control | |
          | Select [2.0] | Verify that file is playing at double speed |
          | Select [Multiplier] control | |
          | Select [0.5] | Verify that file is playing at half speed |
        "));
    },

    basic_controls_for_streamed_content: function()
    {

//*Note* In order to play stream on Maemo, invoke player with following command from console:
//            run-standalone.sh ./player http://202.6.74.107:8060/triplej.mp3
//*Note* For this test you need a playlist of streaming media urls. Suggest: http://202.6.74.107:8060/triplej.mp3 ; http://www.abc.net.au/streaming/triplej.asx ; rtsp://media1.abc.net.au/broadcast/triplej.rm ; mms://media3.abc.net.au/triplej ; depending on your platform and backend support.

       // Test meta data
       testApplication = "Multimedia - Content Streaming";
       testBinary = "player";
       testGoal = "Verify various forms of video streaming.";
       testPreconditions = "";
       testGroups = "BAT";

       // Test steps
       prompt(twiki("---+++ " + testApplication + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | In player application, Select or Tap [Open] | |
          | In [Open File] navigate and highlight test (streaming) playlist file | |
          | Select or Tap on selected file to return to player UI | Verify selected file has populated playlist |
          | Highlight file in playlist by selecting or clicking it | |
          | Select [Play] | Verify that stream is playing on device |
          | Select [Pause] | Verify that stream is paused on device |
          | | Verify that the [Pause] button has changed to a [Play] button |
          | Select [Play] again | Verify that stream is playing on device |
          | Select [Stop] | |
          | Open local mp3 file in to play list and select it to play | Verify that the mp3 plays while the stream name is still present in the playlist |
          | Re-select the stream in the playlist | Verify that the stream starts playing again |
          | Select [Next File] | Verify that the player started playing the next file in the playlist |
          | Select [Previous File] | Verify that the original stream is playing again |
          | During stream playback, have headphones connected to device | Verify that the sound is now playing through the headphones |
          | Invoke a system notification on the device (such as an incoming SMS) | Verify that the device correctly transmits the audible system notification through the devices speakers and then returns to playing the stream through the headphones |
        "));
    },

    take_a_video: function()
    {
        // Test meta data
         testApplication = "Multimedia - Video Camera";
         testBinary = "camera";
        testGoal = "Verify that the camera can capture and save an audio/video file.";
        testPreconditions = "";
        testGroups = "BAT";

        // Test steps
        prompt(twiki("---+++ " + testApplication + "<br><br>
             *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | If device has lens cover, make sure it is open | |
            | Select Video tab to put camera in video mode |  Verify the intended scene is reproduced in the preview/viewfinder |
            | Select Record Video | Verify that video is shown on screen for preview |
            | Select Pause | Verify that the Recorded counter has stopped |
            | Select Record again | Verify that the Recorded counter has continued counting |
            | Select Stop | Verify that the recording has now stopped |
            | | Verify that a new file is in the Images folder and accessabble with the player |
            | Select given video | Verify that it is a true representation of the intended sceen |
            |  | Verify that the Pause in the recording has happened and that recording continued without an issue after that |
            | | Verify the image has no unintended artifacts and noise and is properly formatted |
        "));
    },

    change_video_settings: function()
    {
        // Test meta data
        testApplication = "Multimedia - Video Camera";
        testBinary = "camera";
        testGoal = "Verify that the camera can change its Video settings successfully.";
        testPreconditions = "";
        testGroups = "BAT";

        // Test steps
        prompt(twiki("---+++ " + testApplication + "<br><br>
             *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | If device has lens cover, make sure it is open | |
            | Select Video tab to put camera in video mode |  Verify the intended scene is reproduced in the preview/viewfinder |
            | In the Menu Bar, select Settings/Devices | Verify that you can select Primay and Secondary Camera on Device |
            | Select Secondary Camera | Verify that devise is now showing video stram from Front Facing camera |
            | Select Settings/File/Settings | Verify that you now have otion to select Audio Codecs, Resolution Sample Rate, Framerate, Quality, Video Codecs and Container Format |
            | Change Audio Codecs to another supported Codecs | Verify that camera can record |
            | Change Resolutiuon to another supported Resolution | Verify that camera can record |
            | Change Sample Rate to another supported Sample Rate | Verify that camera can record |
            | Change Framerate to another supported Framerate | Verify that camera can record |
            | Change Quality | Verify that camera can record |
            | Change Video Codecs to another supported Video Codecs | Verify that camera can record |
            | Change Container Format | Verify that camera can record |
            | Change Quality | Verify that camera can record |
        "));
    },

}
